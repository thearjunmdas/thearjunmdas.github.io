<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ArMD</title>
    <link>https://thearjunmdas.github.io/</link>
    <description>Recent content on ArMD</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 02 Aug 2021 07:21:00 +0530</lastBuildDate><atom:link href="https://thearjunmdas.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tables in emacs org-mode</title>
      <link>https://thearjunmdas.github.io/entries/tables-in-emacs-org-mode/</link>
      <pubDate>Mon, 02 Aug 2021 07:21:00 +0530</pubDate>
      
      <guid>https://thearjunmdas.github.io/entries/tables-in-emacs-org-mode/</guid>
      <description>Emacs has native support for tables but org mode makes using tables a breeze. This will be a quick primer for org-mode tables.
 org-mode must be enabled in your buffer to move ahead
 Setting up a Table A table can be created in any of the following ways
 Start typing with | followed by a column name and another |, press TAB. org-mode will auto-detect this to be a table C-c | will create a templated table with number of columns of your choice  Creating a new row Just go to the last column, press tab before the last |</description>
    </item>
    
    <item>
      <title>How to be a dragon rider?</title>
      <link>https://thearjunmdas.github.io/entries/how-to-be-a-dragon-rider/</link>
      <pubDate>Sat, 19 Jun 2021 07:45:00 +0530</pubDate>
      
      <guid>https://thearjunmdas.github.io/entries/how-to-be-a-dragon-rider/</guid>
      <description>Dragons may be fictional but dragonriders are real in the world of dragonruby.
 DragonRuby is a zero dependency, cross platform, Ruby runtime built on top of mRuby, libSDL, and LLVM and DragonRuby Game Toolkit, gtk, is a professional grade 2D game engine.
 I was drawn into the dragonriders&#39; lair by the dragonruby-classics-jam-gauntlet-edition, which led me to build a game under 2 weekends of ruby programming in gtk.
 Figure 1: My first 2D game</description>
    </item>
    
    <item>
      <title>Ruby version management with docker</title>
      <link>https://thearjunmdas.github.io/entries/dev-with-ruby-docker/</link>
      <pubDate>Wed, 09 Dec 2020 11:08:00 +0530</pubDate>
      
      <guid>https://thearjunmdas.github.io/entries/dev-with-ruby-docker/</guid>
      <description>I have been using rvm to manage my ruby versions for a long time. With a few macOS upgrades, ruby installations via rvm has been failing for a myriad of reasons which prompted me to look for an alternative version manager. I settled on using docker images and docker as my version manager.
Installations Install docker engine from here
A Dockerfile for every ruby version Its best to have a separate dockerfile for every ruby project and import the ruby version of your liking in the first line of the dockerfile.</description>
    </item>
    
    <item>
      <title>Encrypt and Decrypt files while using git</title>
      <link>https://thearjunmdas.github.io/entries/encrypt-decrypt-files-with-git/</link>
      <pubDate>Wed, 21 Oct 2020 09:38:00 +0530</pubDate>
      
      <guid>https://thearjunmdas.github.io/entries/encrypt-decrypt-files-with-git/</guid>
      <description>Quick steps to automagically encrypt/decrypt files while pushing/pulling with git.
Installations   We will use git-crypt to encrypt/decrypt files. Read more about git-crypt here.
brew install git-crypt Code Snippet 1: Install git-crypt    Install gpg
brew install gpg Code Snippet 2: Install gpg    Setup git-crypt for your github repository Clone your repository or cd into the folder where you have already cloned your repository. Initialise git-crypt in the folder.</description>
    </item>
    
    <item>
      <title>Authorization header in Swagger UI</title>
      <link>https://thearjunmdas.github.io/entries/authorization-field-in-swagger-ui/</link>
      <pubDate>Wed, 09 Sep 2020 05:51:00 +0530</pubDate>
      
      <guid>https://thearjunmdas.github.io/entries/authorization-field-in-swagger-ui/</guid>
      <description>I was setting up JWT authentication for APIs of my spring boot app and wanted to test them from swagger-ui, but could not find a direct answer in my google searches. So adding my tweaks to get this done, as an entry here.
The quickest way to get this done is to configure a global parameter in the Docket bean, which will show up on all APIs. I have added my swagger config here.</description>
    </item>
    
    <item>
      <title>Backup org files in github</title>
      <link>https://thearjunmdas.github.io/entries/backup-org-files-in-github/</link>
      <pubDate>Thu, 20 Aug 2020 07:52:00 +0530</pubDate>
      
      <guid>https://thearjunmdas.github.io/entries/backup-org-files-in-github/</guid>
      <description>tl;dr I used the following code snippets to backup my emacs org files. A quick explanation would be - The cron-job invokes backup_files_to_github.sh, once every 15 minutes, to push modified org files in the ~/org directory to a github repository. You could use this to backup any files.

NOWT=$(date +&amp;#34;%Y-%m-%d %T&amp;#34;) git add . git commit -m &amp;#34;$NOWTAutomated git push&amp;#34; git push Code Snippet 1: backup_files_to_github.sh  
*/15 * * * * cd ~/org &amp;amp;&amp;amp; .</description>
    </item>
    
  </channel>
</rss>
